You are a frontend dev at a popular social media platform, and you're tasked with creating a feature that displays 
a user's friend list. The friend list should be fetched from the server and displayed on the user's profile page. 
The API endpoint to fetch the friend list is https://api.example.com/user/friends, and it returns a JSON response 
with an array of friend objects.

The API endpoint is rate-limited, and it only allows 5 requests per minute. Your task is to write a JavaScript 
function fetchFriends that takes a userId as an input and returns a promise that resolves with the friend list.
 The function should handle the rate-limiting constraint by queuing the requests and making them serially.

Here's a skeleton code to get you started:
const queue = [];
let isRequestInFlight = false;

function fetchFriends(userId) {
  // Your implementation goes here
}
Your implementation should also handle errors and display a error message to the user if the API request fails.
You are expected to write the implementation of the fetchFriends function, including any necessary error handling and queuing logic.

const queue = [];
let isRequestInFlight = false;
let requestCount = 0;

const fetchFriends = (userId) => {
  return new Promise((resolve, reject) => {
    queue.push({ userId, resolve, reject });
    processQueue();
  });
};

const processQueue = () => {
  if (queue.length === 0 || isRequestInFlight) return;

  isRequestInFlight = true;
  const { userId, resolve, reject } = queue.shift();

  fetch(`https://api.example.com/user/friends?userId=${userId}`)
    .then(response => {
      if (!response.ok) throw new Error(`Error: ${response.status} ${response.statusText}`);
      return response.json();
    })
    .then(data => {
      requestCount++;
      resolve(data.friends);
      isRequestInFlight = false;
      handleRateLimit();
      processQueue();
    })
    .catch(error => {
      isRequestInFlight = false;
      reject(error);
      displayErrorMessage(error.message);
      processQueue();
    });
};

const handleRateLimit = () => {
  if (requestCount >= 5) {
    requestCount = 0;
    setTimeout(processQueue, 60000); // Wait 1 minute
  }
};

const displayErrorMessage = (message) => {
  console.error("Error fetching friends:", message);
};

// Example usage:
fetchFriends(123)
  .then(friends => console.log('Friend list:', friends))
  .catch(error => console.error('Failed to fetch friends:', error));
